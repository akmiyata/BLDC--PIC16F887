/*
 * Sensorless brushless DC ( BLDC ) motor control with PIC16F887 microcontroller.
 * C Code for CCS C compiler.
 * This is a free software with NO WARRANTY.
 * https://simple-circuit.com/
 */
 
#define PWM_MIN_DUTY      80
#define PWM_START_DUTY    200L       // Letter L for 'Long' (16-bit number)
 
#include <16F887.h>
#device ADC = 10
#fuses NOMCLR, HS, NOBROWNOUT, NOLVP
#use delay(clock = 20MHz)
#use fast_io(D)
 
void AH_BL();
void AH_CL();
void BH_CL();
void BH_AL();
void CH_AL();
void CH_BL();
void bldc_move();
 
int8 bldc_step = 0;
int16 motor_speed;
 
#INT_COMP
void comparator_isr() {                // Comparator ISR
  // BEMF debounce
  for(int8 j = 0; j < 20; j++) {
    if(bldc_step & 1) {
      if(!C1OUT)    j -= 1;
    }
    else {
      if(C1OUT)    j -= 1;
    }
  }
  bldc_move();
  clear_interrupt(INT_COMP);                     // Clear comparators interrupt flag
}
 
void bldc_move(){        // BLDC motor commutation function
  switch(bldc_step){
    case 0:
      AH_BL();
      setup_comparator(CP1_B3_A3);   // Sense BEMF C (pin RA3 positive, RB3 negative)
      break;
    case 1:
      AH_CL();
      setup_comparator(CP1_A1_A3);   // Sense BEMF B (pin RA3 positive, RA1 negative)
      break;
    case 2:
      BH_CL();
      setup_comparator(CP1_A0_A3);   // Sense BEMF A (pin RA3 positive, RA0 negative)
      break;
    case 3:
      BH_AL();
      setup_comparator(CP1_B3_A3);   // Sense BEMF C (pin RA3 positive, RB3 negative)
      break;
    case 4:
      CH_AL();
      setup_comparator(CP1_A1_A3);   // Sense BEMF B (pin RA3 positive, RA1 negative)
      break;
    case 5:
      CH_BL();
      setup_comparator(CP1_A0_A3);   // Sense BEMF A
      break;
  }
  bldc_step++;
  if(bldc_step >= 6)
    bldc_step = 0;
}
 
void main(){
  output_d(0);                                   // PORTD initial state
  set_tris_d(0);                                 // Configure all PORTD pins as outputs
  setup_timer_2(T2_DIV_BY_1, 255, 1);            // Set PWM frequency to 19.53KHz and 10-bit resolution
  setup_adc(ADC_CLOCK_INTERNAL);                 // Set ADC module clock source to internal
  setup_adc_ports(sAN4);                         // Configure AN4 pin as analog
  set_adc_channel(4);                            // Select channel 4 (AN4)
  ENABLE_INTERRUPTS(GLOBAL);                     // Enable global interrupts
  ENABLE_INTERRUPTS(PERIPH);                     // Enable periphiral interrupts
  clear_interrupt(INT_COMP);                     // Clear comparators interrupt flag
  
  // Motor start
  set_pwm1_duty(PWM_START_DUTY);                 // Set PWM duty cycle
  int16 i = 5000;
  while(i > 100) {
    delay_us(i);
    bldc_move();
    i = i - 20;
  }
  ENABLE_INTERRUPTS(INT_COMP);                   // Enable comparators interrupt
  while(TRUE) {
    READ_ADC(ADC_START_ONLY);                    // Start analog conversion
    delay_ms(50);                                // wait 50 ms
    motor_speed = read_adc(ADC_READ_ONLY);       // Read conversion result
    if(motor_speed < PWM_MIN_DUTY)
      motor_speed = PWM_MIN_DUTY;
    set_pwm1_duty(motor_speed);                  // Set PWM duty cycle
  }
}
 
void AH_BL(){
  setup_ccp1(CCP_OFF);
  output_d(0x08);
  setup_ccp1(CCP_PWM| CCP_PULSE_STEERING_D);     // PWM output on pin P1D (RD7), others OFF
}
void AH_CL(){
  output_d(0x04);
}
void BH_CL(){
  setup_ccp1(CCP_OFF);
  output_d(0x04);
  setup_ccp1(CCP_PWM| CCP_PULSE_STEERING_C);     // PWM output on pin P1C (RD6), others OFF
}
void BH_AL(){
  output_d(0x10);
}
void CH_AL(){
  setup_ccp1(CCP_OFF);
  output_d(0x10);
  setup_ccp1(CCP_PWM| CCP_PULSE_STEERING_B);     // PWM output on pin P1B (RD5), others OFF
}
void CH_BL(){
  output_d(0x08);
}
